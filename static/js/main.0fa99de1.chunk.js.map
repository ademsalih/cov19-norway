{"version":3,"sources":["TotalGraph/TotalGraph.js","Spinner/Spinner.js","api/getCSV.js","TotalBox/TotalBox.js","Municipality/Municipality.js","Content/Content.js","Header/Header.js","App.js","serviceWorker.js","index.js","Spinner/spinner.png"],"names":["TotalGraph","data","labels","x","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","total","daily","className","height","width","options","aspectRatio","Spinner","src","spinner","alt","a","fetch","process","reponse","text","TotalBox","today","Municipality","y","sort","municipTotals","map","index","push","b","sorted","e","borderWidth","hoverBackgroundColor","hoverBorderColor","Content","useState","string","setString","municip","setMunicip","React","useEffect","get","then","result","readString","getTotalInfections","i","infections","length","curr","currSum","slice","reduce","parseInt","cumulative","array","sum","cumulativeSum","value","getTotalForMunicips","municipStats","lastOf","dates","splice","getDates","totalInfections","cumulativeInfections","getTotalCumulativeInfections","municipalities","municips","temp","getMunicipalities","tmp","totalStat","col","row","shift","getMunicipStats","classNamePrefix","defaultValue","isDisabled","isLoading","isClearable","isRtl","isSearchable","name","onChange","handleChange","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.0fa99de1.chunk.js","sourcesContent":["import React from \"react\"\nimport { Line } from \"react-chartjs-2\"\nimport \"./style.css\"\n\nexport const TotalGraph = ({x,total,daily}) => {\n\tconst data = {\n\t\tlabels: x,\n\t\tdatasets: [\n\t\t\t{\n\t\t\t\tlabel: \"Totalt\",\n\t\t\t\tfill: false,\n\t\t\t\tlineTension: 0.1,\n\t\t\t\tbackgroundColor: \"rgba(75,192,192,0.4)\",\n\t\t\t\tborderColor: \"rgba(202,15,27,1)\",\n\t\t\t\tborderCapStyle: \"butt\",\n\t\t\t\tborderDash: [],\n\t\t\t\tborderDashOffset: 0.0,\n\t\t\t\tborderJoinStyle: \"miter\",\n\t\t\t\tpointBorderColor: \"rgba(202,15,27,1)\",\n\t\t\t\tpointBackgroundColor: \"#CA0F1B\",\n\t\t\t\tpointBorderWidth: 1,\n\t\t\t\tpointHoverRadius: 5,\n\t\t\t\tpointHoverBackgroundColor: \"rgba(202,15,27,1)\",\n\t\t\t\tpointHoverBorderColor: \"rgba(202,15,27,1)\",\n\t\t\t\tpointHoverBorderWidth: 2,\n\t\t\t\tpointRadius: 3,\n\t\t\t\tpointHitRadius: 10,\n\t\t\t\tdata: total\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: \"Nye\",\n\t\t\t\tfill: false,\n\t\t\t\tlineTension: 0.1,\n\t\t\t\tbackgroundColor: \"rgba(231,128,0,1)\",\n\t\t\t\tborderColor: \"rgba(231,128,0,1)\",\n\t\t\t\tborderCapStyle: \"butt\",\n\t\t\t\tborderDash: [],\n\t\t\t\tborderDashOffset: 0.0,\n\t\t\t\tborderJoinStyle: \"miter\",\n\t\t\t\tpointBorderColor: \"rgba(231,128,0,1)\",\n\t\t\t\tpointBackgroundColor: \"#E77F00\",\n\t\t\t\tpointBorderWidth: 1,\n\t\t\t\tpointHoverRadius: 5,\n\t\t\t\tpointHoverBackgroundColor: \"rgba(231,128,0,1)\",\n\t\t\t\tpointHoverBorderColor: \"rgba(231,128,0,1)\",\n\t\t\t\tpointHoverBorderWidth: 2,\n\t\t\t\tpointRadius: 3,\n\t\t\t\tpointHitRadius: 10,\n\t\t\t\tdata: daily\n\t\t\t}\n\t\t]\n\t}\n\n\treturn (\n\t\t<div className=\"graphBackground\">\n\t\t\t<Line\n\t\t\t\tdata={data}\n\t\t\t\theight={null}\n\t\t\t\twidth={null}\n\t\t\t\toptions={{\n\t\t\t\t\taspectRatio: 1.8\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n","import React from 'react'\nimport './style.css'\n\nimport spinner from './spinner.png'\n\nexport const Spinner = () => {\n    return(\n        <div className=\"spinnerBox\">\n            <img src={spinner} className=\"spinner\" alt=\"spinner\"/>\n            <p>Laster inn</p>\n        </div>\n    )\n}","export async function get() {\n\n    const reponse = await fetch(`${process.env.PUBLIC_URL}/infections-norway.csv`);\n    const data = await reponse.text();\n\n    return data\n}","import React from 'react'\nimport './style.css'\n\nexport const TotalBox = ({total,today}) => {\n    return(\n        <div className=\"summaryBox\">\n            <div className=\"totalBoxContainer\">\n                <div className=\"totalBox\">\n                    <h4>TOTALT</h4>\n                    <h1>{total}</h1>\n                </div>\n            </div>\n            <div className=\"todayBoxContainer\">\n                <div className=\"todayBox\">\n                    <h4>I DAG</h4>\n                    <h1>{today}</h1>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { HorizontalBar } from \"react-chartjs-2\"\nimport './style.css'\n\nexport const Municipality = ({x,y}) => {\n\n    function sorted() {\n        let municipTotals = []\n\n        x.map((x,index) => municipTotals.push( [x,y[index] ] ))\n\n        let sortedList = municipTotals.sort((a,b) => {\n            return a[1] < b[1]\n        })\n        \n        return sortedList\n    }\n\n    let sort = sorted()\n\n    let sortedMunicip = sort.map(e => e[0])\n    let sortedCount = sort.map(e => e[1])\n\n    const data = {\n        labels: sortedMunicip,\n        datasets: [\n            {\n                label: 'Smittede',\n                backgroundColor: 'rgba(202,15,27,1)',\n                borderColor: 'rgba(202,15,27,1)',\n                borderWidth: 1,\n                hoverBackgroundColor: 'rgba(202,15,27,1)',\n                hoverBorderColor: 'rgba(202,15,27,1)',\n                data: sortedCount\n            }\n        ]\n    };\n\n    return(\n        <div>\n            <HorizontalBar data={data} height={null} width={null}\n\t\t\t\toptions={{\n\t\t\t\t\taspectRatio: 1.2\n\t\t\t\t}}\n            />\n        </div>\n    )\n}","import React, {useState} from 'react'\nimport { TotalGraph } from '../TotalGraph'\nimport { readString } from 'react-papaparse'\nimport { Spinner } from '../Spinner'\nimport { get } from '../api/getCSV.js'\nimport { TotalBox } from '../TotalBox'\nimport Select from 'react-select'\nimport { Municipality } from '../Municipality'\nimport './style.css'\n\nexport const Content = () => {\n    const [string, setString] = useState(\"\")\n    const [municip, setMunicip] = useState(0)\n\n    React.useEffect(() => {\n          get().then(result => setString(result))\n     }, [])\n    \n    var results = readString(string)\n    let data = results['data']\n\n    function getDates() {\n        let dates = []\n        data.map(x => dates.push(x[0]))\n        return dates.splice(1)\n    }\n\n    function getTotalInfections() {\n        var infections = []\n        var i;\n        for (i = 1; i < data.length; i++) {\n            let curr = data[i]\n            curr = curr.slice(1)\n            let currSum = curr.reduce((a,b) => parseInt(a) + parseInt(b), 0)\n            infections.push(currSum)\n        }\n        return infections\n    }\n\n    function getTotalCumulativeInfections() {\n        let total = getTotalInfections()\n        const cumulativeSum = (sum => value => sum += value)(0);\n        return total.map(cumulativeSum)\n    }\n\n    function cumulative(array) {\n        const cumulativeSum = (sum => value => sum += parseInt(value))(0);\n        return array.map(cumulativeSum)\n    }\n\n    function getMunicipalities() {\n        if (string) {\n            let municips = []\n            let temp = data[0].slice(0)\n            temp = temp.splice(1)\n            temp.map((e,index) => municips.push({value: index,label: e}))\n            return municips\n        }\n    }\n\n    function getMunicipStats() {\n        if (string) {\n            let tmp = data.slice()\n            tmp = tmp.splice(1)\n\n            let totalStat = tmp[0].map((col, i) => tmp.map(row => row[i]));\n            totalStat.shift()\n            return totalStat\n        }\n    }\n\n    function getTotalForMunicips() {\n        if (string) {\n            let last = municipStats.map(x => lastOf(cumulative(x)))\n            return last\n        }\n    }\n\n    function municipVals(muns,stats) {\n        if (string) {\n            let municipSorted = []\n\n            let munis = muns\n            let muniStats = stats\n\n            munis.map((x,index) => municipSorted.push([x,muniStats[index]]))\n\n            let sortedList = municipSorted.sort((a,b) => {\n                return a[0]['label'] > b[0]['label']\n            })\n            \n            console.log(municipSorted)\n            return municipSorted\n        }\n    }\n\n    function lastOf(array) {\n        return array[array.length-1]\n    }\n\n    let dates = getDates()\n    let totalInfections = getTotalInfections()\n    let cumulativeInfections = getTotalCumulativeInfections()\n\n\n    //let municipalities = msvals.map(e => e[0])\n    //let municipStats = msvals.map(e => e[1])\n\n    let municipalities = getMunicipalities()\n    let municipStats = getMunicipStats()\n\n    /* let msvals = municipVals(municipalities2,municipStats2)\n\n    let municipalities = msvals.map(e => e[0])\n    let municipStats = msvals.map(e => e[1]) */\n\n\n    let currenctForMunicips = getTotalForMunicips()\n\n    if (!string) {\n        return <Spinner />\n    }\n\n    function handleChange(e) {\n        setMunicip(e)\n    }\n\n    return (\n        <div className=\"content\">\n            <h3>HELE NORGE</h3>\n            <br/>\n            <TotalBox total={lastOf(cumulativeInfections)} today={lastOf(totalInfections)} />\n            <br/>\n            <TotalGraph x={dates} total={cumulativeInfections} daily={totalInfections} />\n            <br/>\n            <br/>\n            <br/>\n            <h3>KOMMUNE</h3>\n            <br/>\n            <Select\n                className=\"basic-single\"\n                classNamePrefix=\"select\"\n                defaultValue={municipalities[0]}\n                isDisabled={false}\n                isLoading={false}\n                isClearable={false}\n                isRtl={false}\n                isSearchable={false}\n                name=\"color\"\n                options={municipalities}\n                onChange={e => handleChange(e.value)}\n            />\n            <br/>\n            <TotalBox today={lastOf(municipStats[municip])} total={lastOf(cumulative(municipStats[municip]))} />\n            <br/>\n\n            <TotalGraph x={dates} total={cumulative(municipStats[municip])} daily={municipStats[municip]} />\n            <br/>\n            <br/>\n            <h3>FORDELING AV SMITTEDE</h3>\n            <br/>\n            <Municipality x={municipalities.map(e => e.label)} y={getTotalForMunicips()} />\n            <br/>\n            <br/>\n        </div>\n    )\n}\n","import React from \"react\"\nimport \"./style.css\"\n\nexport const Header = () => {\n    return (\n\t\t<div className=\"header\">\n\t\t\t<h2 className=\"heading\">Coronavirus i Norge</h2>\n\t\t</div>\n\t)\n}\n","import React from \"react\"\nimport \"./App.css\"\nimport { Content } from \"./Content\"\nimport { Header } from './Header'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n            <Header />\n\t\t\t<Content />\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/spinner.46497014.png\";"],"sourceRoot":""}