{"version":3,"sources":["TotalGraph/TotalGraph.js","Spinner/Spinner.js","api/getCSV.js","TotalBox/TotalBox.js","Content/Content.js","Header/Header.js","App.js","serviceWorker.js","index.js","Spinner/spinner.png"],"names":["TotalGraph","data","labels","x","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","total","daily","className","options","aspectRatio","Spinner","src","spinner","alt","a","fetch","process","reponse","text","TotalBox","today","Content","useState","string","setString","React","useEffect","get","then","result","readString","getTotalInfections","i","infections","length","curr","currSum","slice","reduce","b","parseInt","push","dates","map","splice","getDates","totalInfections","cumulativeInfections","sum","cumulativeSum","value","getTotalCumulativeInfections","count","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.a0b1a522.chunk.js","sourcesContent":["import React from \"react\"\nimport { Line } from \"react-chartjs-2\"\nimport \"./style.css\"\n\nexport const TotalGraph = ({x,total,daily}) => {\n\tconst data = {\n\t\tlabels: x,\n\t\tdatasets: [\n\t\t\t{\n\t\t\t\tlabel: \"Totalt\",\n\t\t\t\tfill: false,\n\t\t\t\tlineTension: 0.1,\n\t\t\t\tbackgroundColor: \"rgba(75,192,192,0.4)\",\n\t\t\t\tborderColor: \"rgba(202,15,27,1)\",\n\t\t\t\tborderCapStyle: \"butt\",\n\t\t\t\tborderDash: [],\n\t\t\t\tborderDashOffset: 0.0,\n\t\t\t\tborderJoinStyle: \"miter\",\n\t\t\t\tpointBorderColor: \"rgba(202,15,27,1)\",\n\t\t\t\tpointBackgroundColor: \"#CA0F1B\",\n\t\t\t\tpointBorderWidth: 1,\n\t\t\t\tpointHoverRadius: 5,\n\t\t\t\tpointHoverBackgroundColor: \"rgba(202,15,27,1)\",\n\t\t\t\tpointHoverBorderColor: \"rgba(202,15,27,1)\",\n\t\t\t\tpointHoverBorderWidth: 2,\n\t\t\t\tpointRadius: 3,\n\t\t\t\tpointHitRadius: 10,\n\t\t\t\tdata: total\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: \"Daglig\",\n\t\t\t\tfill: false,\n\t\t\t\tlineTension: 0.1,\n\t\t\t\tbackgroundColor: \"rgba(231,128,0,1)\",\n\t\t\t\tborderColor: \"rgba(231,128,0,1)\",\n\t\t\t\tborderCapStyle: \"butt\",\n\t\t\t\tborderDash: [],\n\t\t\t\tborderDashOffset: 0.0,\n\t\t\t\tborderJoinStyle: \"miter\",\n\t\t\t\tpointBorderColor: \"rgba(231,128,0,1)\",\n\t\t\t\tpointBackgroundColor: \"#E77F00\",\n\t\t\t\tpointBorderWidth: 1,\n\t\t\t\tpointHoverRadius: 5,\n\t\t\t\tpointHoverBackgroundColor: \"rgba(231,128,0,1)\",\n\t\t\t\tpointHoverBorderColor: \"rgba(231,128,0,1)\",\n\t\t\t\tpointHoverBorderWidth: 2,\n\t\t\t\tpointRadius: 3,\n\t\t\t\tpointHitRadius: 10,\n\t\t\t\tdata: daily\n\t\t\t}\n\t\t]\n\t}\n\n\treturn (\n\t\t<div className=\"graphBackground\">\n\t\t\t<Line\n\t\t\t\tdata={data}\n\t\t\t\toptions={{\n\t\t\t\t\taspectRatio: 1\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n","import React from 'react'\nimport './style.css'\n\nimport spinner from './spinner.png'\n\nexport const Spinner = () => {\n    return(\n        <div className=\"spinnerBox\">\n            <img src={spinner} className=\"spinner\" alt=\"spinner\"/>\n            <p>Laster inn</p>\n        </div>\n    )\n}","export async function get() {\n\n    const reponse = await fetch(`${process.env.PUBLIC_URL}/infections-norway.csv`);\n    const data = await reponse.text();\n\n    return data\n}","import React from 'react'\nimport './style.css'\n\nexport const TotalBox = ({total,today}) => {\n    return (\n        <div>\n            <h2>{total} registrerte tilfeller</h2>\n\n            {today === 1 ? (\n                <p>{today} nytt tilfelle i dag</p>\n            ) : (\n                <p>{today} nye tilfeller i dag</p>\n            )}\n        </div>\n    )\n}","import React, {useState} from 'react'\nimport { TotalGraph } from '../TotalGraph'\nimport { readString } from 'react-papaparse'\nimport { Spinner } from '../Spinner'\nimport { get } from '../api/getCSV.js'\nimport { TotalBox } from '../TotalBox'\nimport './style.css'\n\nexport const Content = () => {\n    const [string, setString] = useState(\"\")\n\n    React.useEffect(() => {\n          get().then(result => setString(result))\n     }, [])\n    \n    var results = readString(string)\n    let data = results['data']\n\n    function getDates() {\n        let dates = []\n        data.map(x => dates.push(x[0]))\n        return dates.splice(1)\n    }\n\n    function getTotalInfections() {\n        var infections = []\n        var i;\n        for (i = 1; i < data.length; i++) {\n            let curr = data[i]\n            curr = curr.slice(1)\n            let currSum = curr.reduce((a,b) => parseInt(a) + parseInt(b), 0)\n            infections.push(currSum)\n        }\n        return infections\n    }\n\n    function getTotalCumulativeInfections() {\n        let total = getTotalInfections()\n        const cumulativeSum = (sum => value => sum += value)(0);\n        return total.map(cumulativeSum)\n    }\n\n    let dates = getDates()\n    let totalInfections = getTotalInfections()\n    let cumulativeInfections = getTotalCumulativeInfections()\n\n    if (!string) {\n        return <Spinner />\n    }\n\n    let count = cumulativeInfections[cumulativeInfections.length-1]\n    let today = totalInfections[cumulativeInfections.length-1]\n\n    return (\n        <div className=\"content\">\n            <TotalBox total={count} today={today} />\n            <br/>\n            <TotalGraph x={dates} total={cumulativeInfections} daily={totalInfections} />\n        </div>\n    )\n}\n","import React from \"react\"\nimport \"./style.css\"\n\nexport const Header = () => {\n    return (\n\t\t<div className=\"header\">\n\t\t\t<h2 className=\"heading\">Coronavirus i Norge</h2>\n\t\t</div>\n\t)\n}\n","import React from \"react\"\nimport \"./App.css\"\nimport { Content } from \"./Content\"\nimport { Header } from './Header'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n            <Header />\n\t\t\t<Content />\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/spinner.46497014.png\";"],"sourceRoot":""}